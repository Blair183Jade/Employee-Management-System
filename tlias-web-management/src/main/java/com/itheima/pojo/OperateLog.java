package com.itheima.pojo;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * Represents an operational log entry within the application.
 * This class is used to record detailed information about method executions or other operations,
 * facilitating debugging, auditing, and performance monitoring.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class OperateLog {
    /**
     * The unique identifier for the log entry.
     * This is typically generated by the database and is used for tracking individual log entries.
     */
    private Integer id;

    /**
     * The identifier of the user who performed the operation.
     * This helps in tracing which user executed the method or operation.
     */
    private Integer operateUser;

    /**
     * The date and time when the operation was performed.
     * This timestamp is crucial for auditing and tracking purposes.
     */
    private LocalDateTime operateTime;

    /**
     * The name of the class where the operation occurred.
     * This provides context for where in the application the log was generated.
     */
    private String className;

    /**
     * The name of the method that was executed.
     * This detail allows for precise tracking of what functionality was used.
     */
    private String methodName;

    /**
     * The parameters that were passed to the method during execution.
     * Capturing method parameters aids in reproducing issues and understanding the state at the time of execution.
     */
    private String methodParams;

    /**
     * The value returned by the method after execution.
     * Storing return values can be useful for debugging and verifying output retrospectively.
     */
    private String returnValue;

    /**
     * The time taken to execute the operation, typically measured in milliseconds.
     * This is vital for performance monitoring and optimization efforts.
     */
    private Long costTime;
}
